task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}
project.afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                artifact sourcesJar
                artifact javadocJar

                artifactId POM_ARTIFACT_ID
                groupId GROUPID
                version POM_VERSION_NAME
                pom {
                    name = POM_NAME
                    description = POM_DESCRIPTION
                    url = POM_URL
                    inceptionYear = POM_INCEPTION_YEAR
                    packaging = POM_PACKAGING
                    scm {
                        connection = POM_SCM_CONNECTION
                        url = POM_URL
                    }
                    issueManagement {
                        system = POM_ISSUE_SYSTEM
                        url = POM_ISSUE_URL
                    }
                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution = POM_LICENCE_DIST
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "sonatype"

                def releasesRepoUrl = mvn_android_release_url
                def snapshotsRepoUrl = mvn_android_snapshot_url
                url = POM_VERSION_NAME.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                allowInsecureProtocol = true
                credentials {
                    username rootProject.ext.configuration.mvn_release_name
                    password rootProject.ext.configuration.mvn_release_pwd
                }
            }
        }
    }
}